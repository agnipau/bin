#!/usr/bin/env bash
#
# Turing machine in bash because I am a masochist.

# Convert "$tape" to an array.
input_to_tape_array() {
  for ((c=0; c<"${#1}"; c++)); do
    declare -ga tape[$c]="${1:$c:1}"
  done
}

# Convert the "$tape" array to a better looking output.
tape_array_to_output() {
  tape_len="$((${#tape[@]} - 1))"

  # Save the first non-hyphen element of the array into the tape_nhmin var.
  for i in "${!tape[@]}"; do
    [[ "${tape[$i]}" != '-' ]] && tape_nhmin="$i" && break
  done

  # Save the last non-hyphen element of the array into the tape_nhmax var.
  for i in $(printf '%s\n' "${!tape[@]}" | tr '\n' ' ' | rev | sed 's/^ //g'); do
    i="$(printf '%s' "$i" | rev)" && [[ "${tape[$i]}" != '-' ]] && tape_nhmax="$i" && break
  done

  # Create a list from 0 to "$tape_len".
  tarr=0
  for ((c=1; c<="$tape_len"; c++)); do
    tarr+=" $c"
  done

  for i in $tarr; do
    if [[ "${tape[$i]}" == '-' && "$i" -le "$tape_nhmin" || "$i" -gt "$tape_nhmax" ]]; then
      unset -v tape["$i"]
    fi
  done

  printf '%s' "${tape[@]}"
  printf '\n'
  #printf '%s ' "${tape[@]}"
  #printf '\n'
}

# Parse arguments.
if [[ "$1" == --mdt || "$1" == -m ]]; then
  mdt="$2"
  input_to_tape_array "$4"
elif [[ "$1" == --tape || "$1" == -t ]]; then
  mdt="$4"
  input_to_tape_array "$2"
fi

mdt_len="$(wc -l "$mdt" | awk '{print $1}')"
actual_state=0
actual_char=0
continue=true

while [[ "$continue" == true ]]; do
  continue=false

  for ((c=1; c<="$mdt_len"; c++)); do
    # shellcheck disable=SC2155
    declare -a current_instruction="$(printf '%s\n' "$(<"$mdt")" \
                                     | head -n"$c" \
                                     | tail -n1 \
                                     | sed -e "s/,/ /g" \
                                           -e "s/>/'>'/g" \
                                           -e "s/</'<'/g")"

    # If the initial state is the actual state.
    if [[ "${current_instruction[0]}" -eq "$actual_state" ]]; then
      continue=true

      # If the read charachter is equal to the actual character in the "$tape".
      if [[ "${current_instruction[1]}" == "${tape[$actual_char]}" ]]; then
        actual_state="${current_instruction[2]}"
        declare -a tape[$actual_char]="${current_instruction[3]}"

        if [[ "${current_instruction[4]}" == '>' ]]; then
          actual_char="$((actual_char + 1))"
          [[ "${#tape[@]}" -lt "$((actual_char + 1))" ]] && tape+=(-)
        elif [[ "${current_instruction[4]}" == '<' ]]; then
          actual_char="$((actual_char - 1))"
          [[ "$actual_char" -lt 0 ]] && tape=(- "${tape[@]}") && actual_char=0
        elif [[ "${current_instruction[4]}" == '-' ]]; then
          continue=false
          break
        fi
      fi
    fi
  done
done

tape_array_to_output
